version: 2.1

commands:
  # Rollback
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: rbf-kk1j287dhjppmz4371
    steps:
      - run:
          name: Destroy environment
          
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
          when: on_fail

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end Scan
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Scan
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-rbf-kk1j287dhjppmz4371" \
              --parameter-overrides ID="rbf-kk1j287dhjppmz4371"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-rbf-kk1j287dhjppmz4371" \
              --parameter-overrides ID="rbf-kk1j287dhjppmz4371"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text > /tmp/inventory.txt
      - persist_to_workspace:
          root: /tmp
          paths:
            - inventory.txt
      - destroy_environment:
          Workflow_ID: rbf-kk1j287dhjppmz4371

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f1:de:f2:42:19:42:65:4c:a7:b7:28:cb:fb:b3:99:a2"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - attach_workspace:
          at: /tmp
      - run:
          name: Configure server
          command: |
            cat /tmp/inventory.txt >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat ~/project/backend/migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if [ -f "/home/circleci/project/backend/migrations_dump.txt" ]
            then
              echo "found"
            fi
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "curl"
              curl --insecure https://kvdb.io/JsozX3FFahUsMWvi6oCKZm/migration_kk1j287dhjppmz4371  -d '1'
            else
              echo "missing"
            fi
     # Here's where you will add some code to rollback on failure

  deploy-frontend:
    docker:
      - image: cimg/aws:2022.06.1
    steps:
      - checkout
#      - run:
#          name: Install tar gzip
#          command: |
#            yum install -y tar gzip
      - restore_cache:
          keys: [frontend-build]
#      - run:
#          name: Install ansible
#          command: |
#            yum install -y ansible --enablerepo=epel
#      - run:
#          name: Install node and npm
#          command: |
#            curl --location https://rpm.nodesource.com/setup_13.x | bash -
#            yum -y install nodejs
      - attach_workspace:
          at: /tmp
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(cat /tmp/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://rbf-kk1j287dhjppmz4371 --recursive
#            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
